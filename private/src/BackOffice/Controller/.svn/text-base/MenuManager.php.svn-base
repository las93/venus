<?php

/**
 * Menu Manager Controller
 *
 * @category    src
 * @package     src\BackOffice\Controller
 * @author      vietphan
 * @copyright   Copyright (c) 2013-2014 iScreenway FR/VN Inc. (http://www.iscreenway.com)
 * @license     http://www.iscreenway.com/framework/licence.php Tout droit réservé à http://www.iscreenway.com
 * @version     Release: 1.0.0
 * @filesource  http://www.iscreenway.com/framework/download.php
 * @link        http://www.iscreenway.com
 * @since       1.0
 */

namespace src\BackOffice\Controller;

use \core\Controller as Controller;
use \src\BackOffice\Model\menu as MenuModel;
use \src\BackOffice\Entity\menu as MenuEntity;
use \lib\Entity;

/**
 * Controller to test
 *
 * @category    src
 * @package     src\BackOffice\Controller
 * @author      vietphan
 * @copyright   Copyright (c) 2013-2014 iScreenway FR/VN Inc. (http://www.iscreenway.com)
 * @license     http://www.iscreenway.com/framework/licence.php Tout droit réservé à http://www.iscreenway.com
 * @version     Release: 1.0.0
 * @filesource  http://www.iscreenway.com/framework/download.php
 * @link        http://www.iscreenway.com
 * @since       1.0
 */

class MenuManager extends Controller {

    /**
     * Constructor
     *
     * @access public
     * @return object
     */

    public function __construct() {
    	
        $this->menuModel = function() { return new MenuModel; };
        
        parent::__construct();
    }
    
    /**
     * The main menu manager
     *
     * @access public
     * @return void
     */

    public function show() {
    	
    	/*
    	$oUrlManager = new \core\UrlManager;
    	$this->forward($oUrlManager->getUrl('page_create_or_update', array('language' => 'vn')));
    	*/
    	/*
    	$oOrm = new \lib\Orm;
    	
    	$oResults = $oOrm->select(array('*'))
			 			 ->from('page', 'p')
			 			 ->join(
			 			 	array(array(
			 			 		'type' => 'left',
			 			 		'table' => 'menu',
			 			 		'as' => 'm',
			 			 		'left_field' => 'm.id',
			 			 		'right_field' => 'p.menu_id'
			 			 	))
			 			 )
			 			 ->where(array('p.id' => 1))
			 			 ->limit(1)
						 ->load();

    	print_r(\lib\Entity::getAllEntity($oResults[0]));
    	exit;
    	*/
    	
    	/*
    	$params = array('name' => 're', 'menu_id' => 0, 'title' => 'titre');
    	$this->menuModel->update(Entity::autoLoadEntity('menu', $params));
    	*/
    	
        $title = 'Administrator Panel | iScreenway';
        $menusArr = $this->menuModel->getMenuAndPage();
        $menu_ordered = array();
        $this->_orderList($menusArr, $menu_ordered, 'id', 'menu_id');
        
        $oUrlManager = new \core\UrlManager;
       	$sUrlMenuManager = $oUrlManager->getUrl('menu_show', array('language' => 'vn'));

        $this->layout
             ->assign('PRELOADED_DATA', json_encode($menu_ordered))
             ->assign('title', $title)
             ->assign('url_menu', $sUrlMenuManager)
             ->display();
    }

    /**
     * create
     *
     * @access public
     * @return void
     */
    
    public function create() {
        
        $oUrlManager = new \core\UrlManager;
        $sUrlMenuManager = $oUrlManager->getUrl('menu_show', array('language' => 'vn'));
        if ($_SERVER['REQUEST_METHOD'] == 'POST' && $this->menuModel->createOrUpdate($_POST)) {
            
            header('Location: http://'.$_SERVER['HTTP_HOST'].$sUrlMenuManager);
        }
        // if ($menu = $this->menuModel->insertAndGet($menuEntity)) {
        //     echo json_encode(Entity::getAllEntity($menu));
        // }
    }

    /**
     * edit
     * 
     * @access public
     * @return void
     */
    
    public function edit() {
        if ($_SERVER['REQUEST_METHOD'] == 'GET') {
            $menu = $this->menuModel->get(Entity::autoLoadEntity('menu', $_GET))[0];
            $aMenu = Entity::getAllEntity($menu);
            echo json_encode($aMenu);
        }
    	
        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
        	
            $params = json_decode($_POST['menu'], true);

            $this->menuModel->createOrUpdate($params);
        }
        // $this->menuModel->update($menuEntity);
        // $menuEntity

        // echo '<pre>';
        // print_r($menuEntity);
        // echo '</pre>';

        // echo '<pre>';
        // print_r($_POST);
        // echo '</pre>';
        // $menuEntity->set_id($_POST['id']);
        // $menu = $this->menuModel->get($menuEntity);
    }

    /**
     * Delete menu
     *
     * @access public
     * @return void
     */

    public function delete() {
        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
            $this->menuModel->deleteMenu($_POST['id']);
        }
    }

    /**
     * Group list by parent items
     *
     * @access private
     * @param  array  $list          source list
     * @param  array  $list_ordered  destination list
     * @param  string  $primary      primary field
     * @param  string  $sub          sub field that indicates the parent
     * @param  integer $parent_id    parent value start - default 0
     * @return array                 the list that ordered
     */
    
    private function _orderList($list, &$list_ordered, $primary = 'id', $sub = 'parent_id', $parent_id = 0, $level = 0) {
    	
        foreach($list as $item) {
        	
            if ($item[$sub] == $parent_id) {
                $item['level'] = $level + 1;
                $list_ordered[] = $item;
                $this->_orderList($list, $list_ordered, $primary, $sub, $item[$primary], $item['level']);
            }
        }
    }
}
