<?php

/**
 * Model to menu
 *
 * @category    src
 * @package     src\BackOffice\Model
 * @author      vietphan
 * @copyright   Copyright (c) 2013-2014 iScreenway FR/VN Inc. (http://www.iscreenway.com)
 * @license     http://www.iscreenway.com/framework/licence.php Tout droit réservé à http://www.iscreenway.com
 * @version     Release: 1.0.0
 * @filesource  http://www.iscreenway.com/framework/download.php
 * @link        http://www.iscreenway.com
 * @since       1.0
 */

namespace src\BackOffice\Model;

use \core\Model as Model;
use \src\BackOffice\Model\page as PageModel;
use \lib\Entity;
use \lib\Orm\Where;

/**
 * Model to menu
 *
 * @category    src
 * @package     src\BackOffice\Model
 * @author      vietphan
 * @copyright   Copyright (c) 2013-2014 iScreenway FR/VN Inc. (http://www.iscreenway.com)
 * @license     http://www.iscreenway.com/framework/licence.php Tout droit réservé à http://www.iscreenway.com
 * @version     Release: 1.0.0
 * @filesource  http://www.iscreenway.com/framework/download.php
 * @link        http://www.iscreenway.com
 * @since       1.0
 */

class menu extends Model {

    public function __construct() {
        $this->pageModel = function() { return new PageModel; };
        parent::__construct();
    }

    /**
     * create or update menu
     *
     * @access public
     * @return int
     */
    
    public function createOrUpdate($params) {
        $entity = $this->entity;

        $entity->set_name($params['name']);
        $entity->set_menu_id($params['menu_id'] === '' ? null : $params['menu_id']);
        $entity->set_anchor($params['anchor']);
        $entity->set_title($params['title']);
        $entity->set_description($params['description']);
        $entity->set_order($params['order'] === '' ? 0 : $params['order']);
        $entity->set_visible($params['visible'] === 'y' ? 'y' : 'n');

        if (array_key_exists('id', $params) && $params['id'] !== null && $params['id'] !== '') {
            $entity->set_id($params['id']);
            return $this->update($entity);
        } else {
            return $this->insert($entity);
        }
    }

    /**
     * get menu and page
     *
     * @access public
     * @return int
     */
    
    public function getMenuAndPage() {
        $menus = $this->get();
        $menusArr = array();
        
        foreach ($menus as $menu) {
            $menuArr = Entity::getAllEntity($menu);
            $page = $this->pageModel->getPageBy(array('menu_id' => $menuArr['id']));
            if ($page) {
                $menuArr['page'] = Entity::getAllEntity($page);
            }
            $menusArr[] = $menuArr;
        }

        return $menusArr;
    }

    /**
     * delete menu
     *
     * @access public
     * @return int
     */
    
    public function deleteMenu($id) {
        if (is_array($id)) {
            $where = new Where;
            $where->whereIn('id', $id);
            return $this->orm
                        ->delete($this->_sTableName)
                        ->where($where)
                        ->save();
        } else {
            $entity = $this->entity;

            $entity->set_id($id);
            return $this->delete($entity);
        }
    }
}

