<?php

/**
 * Url Manager
 *
 * @category  	core
 * @package   	core\
 * @author    	Judicaël Paquet <paquet.judicael@iscreenway.com>
 * @copyright 	Copyright (c) 2013-2014 iScreenway FR/VN Inc. (http://www.iscreenway.com)
 * @license   	http://www.iscreenway.com/framework/licence.php Tout droit réservé à http://www.iscreenway.com
 * @version   	Release: 1.0.0
 * @filesource	http://www.iscreenway.com/framework/download.php
 * @link      	http://www.iscreenway.com
 * @since     	1.0
 */

namespace core;

/**
 * Url Manager
 *
 * @category  	core
 * @package   	core\
 * @author    	Judicaël Paquet <paquet.judicael@iscreenway.com>
 * @copyright 	Copyright (c) 2013-2014 iScreenway FR/VN Inc. (http://www.iscreenway.com)
 * @license   	http://www.iscreenway.com/framework/licence.php Tout droit réservé à http://www.iscreenway.com
 * @version   	Release: 1.0.0
 * @filesource	http://www.iscreenway.com/framework/download.php
 * @link      	http://www.iscreenway.com
 * @since     	1.0
 */

class UrlManager {

	/**
	 * The base Uri to construct the route
	 * @var string
	 */

	private $_sBaseUri = '';

	/**
	 * create an URL
	 *
	 * @access public
	 * @param  string $sCode code of the url between "routes" and "route" in Route.conf
	 * @param  array $aParams parameters to create the url
	 * @return void
	 *
	 * @tutorial	If I have this route I could make my URL:
	 *
	 * 				"menu_edit": {
	 *					"route": "[/:language]/menu[/:id]/edit/",
	 *					"controller": "\\src\\BackOffice\\Controller\\MenuManager",
	 *					"action": "edit",
	 *					"constraints": {
	 * 						"language": "[a-z]{0,2}",
	 * 						"id": "[0-9]+"
	 *					},
	 *					"content_type": "html"
	 *				},
	 *
	 *				I must write this:
	 *
	 *				$oUrlManager = new \core\UrlManager;
	 *				$sUrl = $oUrlManager->getUrl('menu_edit', array('language' => 'vn', 'id' => 125));
	 */

	public function getUrl($sCode, $aParams) {

		if (isset($_SERVER) && isset($_SERVER['HTTP_HOST'])) {

			foreach (Config::get('Route') as $sHost => $oHost) {

				if ((!strstr($sHost, '/') && $sHost == $_SERVER['HTTP_HOST'])
					|| (strstr($sHost, '/')
					&& strstr($_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'], $sHost))) {

					if (strstr($sHost, '/')
						&& strstr($_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'], $sHost)) {

						$this->_sBaseUri = preg_replace('#^[^/]+#', '', $sHost);
					}

					if (isset($oHost->routes)) {

						$aRoutes = array();

						foreach($oHost->routes as $sKey => $oRoute) {

							if ($sKey === $sCode) {

								$sRoute = $this->_sBaseUri.$oRoute->route;

								if (isset($oRoute->constraints)) {

									foreach ($oRoute->constraints as $sName => $sType) {

										if (preg_match('/'.$sType.'/', $aParams[$sName])) {

											$sRoute = str_replace('[/:'.$sName.']', '/'.$aParams[$sName], $sRoute);
											$sRoute = str_replace('[:'.$sName.']', $aParams[$sName], $sRoute);
											continue;
										}

										throw new \Exception('For the route '.$sCode.' the parameter '.$sName.' is not good!');

									}
								}

								return $sRoute;
							}
						}
					}
				}
			}
		}
	}
}
