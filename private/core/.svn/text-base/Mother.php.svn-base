<?php

/**
 * Mother Manager
 *
 * @category  	core
 * @package   	core\Controller
 * @author    	Judicaël Paquet <paquet.judicael@iscreenway.com>
 * @copyright 	Copyright (c) 2013-2014 iScreenway FR/VN Inc. (http://www.iscreenway.com)
 * @license   	http://www.iscreenway.com/framework/licence.php Tout droit réservé à http://www.iscreenway.com
 * @version   	Release: 1.0.0
 * @filesource	http://www.iscreenway.com/framework/download.php
 * @link      	http://www.iscreenway.com
 * @since     	1.0
 */

namespace core;

/**
 * The Mother Manager
 *
 * @category  	core
 * @package   	core\Controller
 * @author    	Judicaël Paquet <paquet.judicael@iscreenway.com>
 * @copyright 	Copyright (c) 2013-2014 iScreenway FR/VN Inc. (http://www.iscreenway.com)
 * @license   	http://www.iscreenway.com/framework/licence.php Tout droit réservé à http://www.iscreenway.com
 * @version   	Release: 1.0.0
 * @filesource	http://www.iscreenway.com/framework/download.php
 * @link      	http://www.iscreenway.com
 * @since     	1.0
 */

class Mother implements \ArrayAccess {

	/**
	 * containts the closures
	 * @var array
	 */
	
	private $_aClosures = array();

	/**
	 * containts data type
	 * @var array
	 */
	
	private $_aDataType = array();

	/**
	 * containts datas
	 * @var array
	 */
	
	protected $_aData = array();

	/**
	 * get a property
	 * 
	 * @access public
	 * @param  unknown_type $mKey
	 * @return void
	 */
	
	public function __get($mKey) {

		if (isset($this->_aDataType[$mKey])) {

			if (!is_callable($data = $this->_aDataType[$mKey][$mKey]) || (is_string($data) && function_exists($data))) {

				return $data;
			}
			else {

				$context = 'context' !== $mKey ? $this->context : null;
				$dataStore = &$this->_aDataType[$mKey];
				$dataStore[$mKey] = call_user_func($data, $context);
				return $dataStore[$mKey];
			}
		}
		else {

			return null;
		}
	}

	/**
	 * set a property
	 *
	 * @access public
	 * @param  unknown_type $mKey
	 * @return void
	 */
	
	public function __set($mKey, $mValue) {

		if (is_callable($mValue) && !is_string($mValue)) {

			$this->_aClosures[$mKey] = $mValue;
			$this->_aDataType[$mKey] = &$this->_aClosures;
		}
		else {

			$this->_aData[$mKey] = $mValue;
			$this->_aDataType[$mKey] = &$this->_aData;
		}
	}

	public function __unset($mKey) {

		if ($this->__isset($mKey)) {

			unset($this->_aDataType[$mKey][$mKey]);
			unset($this->_aDataType[$mKey]);
		}
	}

	public function __isset($mKey) {

		return isset($this->_aDataType[$mKey]);
	}

	function offsetExists($offset) {

		return $this->__isset($offset);
	}

	public function offsetGet($offset) {

		return $this->__get($offset);
	}

	public function offsetSet($offset, $mValue) {

		$this->__set($offset, $mValue);
	}

	public function offsetUnset($offset) {

		$this->__unset($offset);
	}
}
