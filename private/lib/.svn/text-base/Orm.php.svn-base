<?php

/**
 * Orm Manager
 *
 * @category  	lib
 * @package   	lib\Orm
 * @author    	Judicaël Paquet <paquet.judicael@iscreenway.com>
 * @copyright 	Copyright (c) 2013-2014 iScreenway FR/VN Inc. (http://www.iscreenway.com)
 * @license   	http://www.iscreenway.com/framework/licence.php Tout droit réservé à http://www.iscreenway.com
 * @version   	Release: 1.0.0
 * @filesource	http://www.iscreenway.com/framework/download.php
 * @link      	http://www.iscreenway.com
 * @since     	1.0
 */

namespace lib;

use \lib\Db as Db;
use \lib\Debug as Debug;
use \lib\Entity as Entity;
use \lib\Orm\Where as Where;

/**
 * Orm Manager
 *
 * @category  	lib
 * @package   	lib\Orm
 * @author    	Judicaël Paquet <paquet.judicael@iscreenway.com>
 * @copyright 	Copyright (c) 2013-2014 iScreenway FR/VN Inc. (http://www.iscreenway.com)
 * @license   	http://www.iscreenway.com/framework/licence.php Tout droit réservé à http://www.iscreenway.com
 * @version   	Release: 1.0.0
 * @filesource	http://www.iscreenway.com/framework/download.php
 * @link      	http://www.iscreenway.com
 * @since     	1.0
 */

class Orm extends RequestSql {

	/**
	 * const of the default DB_CONF
	 *
	 * @access private
	 * @var    array
	 */

	const DB_CONF = DB_CONF;

	/**
	 * alias to Where object of the Orm
	 *
	 * @access public
	 * @var    \lib\Orm\Where
	 */

	public $where = null;

	/**
	 * increment to create alias
	 *
	 * @access private
	 * @var    int
	 */

	private $_iAlias = 0;

	/**
	 * select of the request
	 *
	 * @access private
	 * @var    array
	 */

	private $_aSelect = array();

	/**
	 * from of the request
	 *
	 * @access private
	 * @var    string
	 */

	private $_sFrom = '';

	/**
	 * as of from of the request
	 *
	 * @access private
	 * @var    string
	 */

	private $_sFromAs = '';

	/**
	 * join of the request
	 *
	 * @access private
	 * @var    array
	 */

	private $_aJoin = array();

	/**
	 * update of the request
	 *
	 * @access private
	 * @var    string
	 */

	private $_sUpdate = '';

	/**
	 * where of the request
	 *
	 * @access private
	 * @var    array
	 */

	private $_aWhere = array();

	/**
	 * set of the request
	 *
	 * @access private
	 * @var    array
	 */

	private $_aSet = array();

	/**
	 * insert into of the request
	 *
	 * @access private
	 * @var    string
	 */

	private $_sInsertInto = '';

	/**
	 * values of the request
	 *
	 * @access private
	 * @var    array
	 */

	private $_aValues = array();

	/**
	 * delete of the request
	 *
	 * @access private
	 * @var string
	 */

	private $_sDelete = '';

	/**
	 * order by of the request
	 *
	 * @access private
	 * @var array
	 */

	private $_aOrderBy = array();

	/**
	 * limit of the result
	 *
	 * @access private
	 * @var number
	 */

	private $_limit = null;

	/**
	 * constructor to create the symlink to \lib\Orm\Where
	 *
	 * @access public
	 * @param  array $aSelect select
	 * @return \lib\Orm
	 */

	public function __construct() {

		$this->where = new Where;
	}

	/**
	 * select
	 *
	 * @access public
	 * @param  array $aSelect select
	 * @return \lib\Orm
	 */

	public function select($aSelect) {

		$this->_aSelect = $aSelect;
		return $this;
	}

	/**
	 * from
	 *
	 * @access public
	 * @param  string $aJoin join
	 * @return \lib\Orm
	 *
	 * To make Join, please do that :
	 * join(array(
	 *   array(
	 *     'type' => 'left',
	 *     'table' => 'matable',
	 *     'left_field' => 'tablejoin.field1',
	 *     'right_field' => 'table2.field2'
	 *   ),
	 *   array(
	 *     'type' => 'join',
	 *     'table' => 'matable2',
	 *     'left_field' => 'tablejoin2.field1',
	 *     'right_field' => 'table3.field2'
	 *   ),
	 * ))
	 */

	public function join(array $aJoin) {

		$this->_aJoin = $aJoin;
		return $this;
	}

	/**
	 * from
	 *
	 * @access public
	 * @param  string $sFrom from
	 * @return \lib\Orm
	 */

	public function from($sFrom, $sAs = null) {

		$this->_sFrom = $sFrom;
		$this->_sFromAs = $sAs;
		return $this;
	}

	/**
	 * update
	 *
	 * @access public
	 * @param  string $sUpdate update
	 * @return \lib\Orm
	 */

	public function update($sUpdate) {

		$this->_sUpdate = $sUpdate;
		return $this;
	}

	/**
	 * where
	 *
	 * @access public
	 * @param  array $aWhere where
	 * @return \lib\Orm
	 */

	public function where($aWhere) {

		$this->_aWhere = $aWhere;
		return $this;
	}

	/**
	 * Set
	 *
	 * @access public
	 * @param  array $aSet set
	 * @return \lib\Orm
	 */

	public function set($aSet) {

		$this->_aSet = $aSet;
		return $this;
	}

	/**
	 * from
	 *
	 * @access public
	 * @param  string $sInsertInto insert into
	 * @return \lib\Orm
	 */

	public function insert($sInsertInto) {

		$this->_sInsertInto = $sInsertInto;
		return $this;
	}

	/**
	 * where
	 *
	 * @access public
	 * @param  array $aValues values
	 * @return \lib\Orm
	 */

	public function values($aValues) {

		$this->_aValues = $aValues;
		return $this;
	}

	/**
	 * delete
	 *
	 * @access public
	 * @param  string $sDelete delete from
	 * @return \lib\Orm
	 */

	public function delete($sDelete) {

		$this->_sDelete = $sDelete;
		return $this;
	}

	/**
	 * order by
	 *
	 * @access public
	 * @param  array $aOrderBy order by
	 * @return \lib\Orm
	 */

	public function orderBy($aOrderBy) {

		$this->_aOrderBy = $aOrderBy;
		return $this;
	}

	/**
	 * order by
	 *
	 * @access public
	 * @param  array $aOrderBy order by
	 * @return \lib\Orm
	 */

	public function limit($limit) {

		$this->_limit = $limit;
		return $this;
	}

	/**
	 * load
	 *
	 * @access public
	 * @return array
	 */

	public function load() {

		$sQuery = $this->_prepare();
		Debug::log($sQuery);

		$aResults = Db::connect(self::DB_CONF)->query($sQuery)->fetchAll(\PDO::FETCH_ASSOC);

		$aReturn = array();
		$i = 0;

		foreach ($aResults as $aOneResult) {

			$aReturn[$i] = Entity::autoLoadEntity($this->_sFrom, $aOneResult);

			foreach ($this->_aJoin as $aJoin) {

				if (count($aJoin) > 0) {

					$aReturn[$i]->$aJoin['table'] = Entity::autoLoadEntity($aJoin['table'], $aOneResult);
				}
			}
		}

		return $aReturn;
	}

	/**
	 * save
	 *
	 * @access public
	 * @return int
	 */

	public function save() {

		$sQuery = $this->_prepare();
		Debug::log($sQuery);
		return Db::connect(self::DB_CONF)->exec($sQuery);
	}

	/**
	 * prepare the request
	 *
	 * @access private
	 * @return string
	 */

	private function _prepare() {

		if (count($this->_aSelect) > 0 && $this->_sFrom !== '') {

			$sQuery = 'SELECT '.implode(',', $this->_aSelect).' FROM '.$this->_sFrom.' ';

			if ($this->_sFromAs !== null) {

				$sQuery .= 'AS '.$this->_sFromAs.' ';
			}
			else {

				$sQuery .= 'AS t'.$this->_iAlias.' ';
				$this->_iAlias++;
			}

			$sQuery .= $this->_prepareJoin();
			$sQuery .= $this->_prepareWhere();
			$sQuery .= $this->_prepareOrderBy();
			$sQuery .= $this->_prepareLimit();
		}
		else if ($this->_sUpdate !== '') {

			$sQuery = 'UPDATE '.$this->_sUpdate;

			if (count($this->_aSet) > 0) {

				$sQuery .= ' SET ';

				foreach ($this->_aSet as $sKey => $sValue) {

					if ($sValue !== null) {

						$sQuery .= "`".$sKey."` = '".$sValue."',";
					}
				}
			}

			$sQuery = substr($sQuery, 0, -1);

			$sQuery .= $this->_prepareWhere();
		}
		else if ($this->_sInsertInto !== '') {

			$sQuery = 'INSERT INTO '.$this->_sInsertInto.' (';

			foreach ($this->_aValues as $sKey => $sValue) {

				$sQuery .= " `".$sKey."`,";
			}

			$sQuery = substr($sQuery, 0, -1);
			$sQuery .= ") VALUES (";

			foreach ($this->_aValues as $sKey => $sValue) {

				$sQuery .= "'".$sValue."',";
			}

			$sQuery = substr($sQuery, 0, -1);
			$sQuery .= ")";
		}
		else if ($this->_sDelete !== '') {

			$sQuery = 'DELETE FROM '.$this->_sDelete;
			$sQuery .= $this->_prepareWhere();
		}

		return $sQuery;
	}

	/**
	 * prepare the where
	 *
	 * @access private
	 * @return string
	 */

	private function _prepareWhere() {

		$sQuery = '';

		if (is_array($this->_aWhere) && count($this->_aWhere) > 0) {

			$sQuery .= ' WHERE ';

			foreach ($this->_aWhere as $sKey => $sValue) {

				$sQuery .= "".$sKey." = '".$sValue."' && ";
			}

			$sQuery = substr($sQuery, 0, -3);
		}
		else if ($this->_aWhere instanceof Where) {

			$sQuery .= ' WHERE 1 '.$this->_aWhere->get();
		}

		return $sQuery;
	}

	/**
	 * prepare the join
	 *
	 * @access private
	 * @return string
	 */

	private function _prepareJoin() {

		$sQuery = '';

		if (is_array($this->_aJoin) && count($this->_aJoin) > 0) {

			foreach ($this->_aJoin as $sKey => $aValue) {

				if (isset($aValue['type']) && $aValue['type'] == 'left') {

					$sQuery .= " LEFT JOIN ".$aValue['table']." ";
				}
				else {

					$sQuery .= " INNER JOIN ".$aValue['table']." ";
				}

				if (isset($aValue['as']) && $aValue['as']) {

					$sQuery .= " AS ".$aValue['as']." ";
				}
				else {

					$sQuery .= " AS t".$this->_iAlias." ";
					$this->_iAlias++;
				}

				$sQuery .= " ON ".$aValue['left_field']." =  ".$aValue['right_field']." ";
			}
		}

		return $sQuery;
	}

	/**
	 * prepare the order by
	 *
	 * @access private
	 * @return string
	 */

	private function _prepareOrderBy() {

		$sQuery = '';

		if (is_array($this->_aOrderBy) && count($this->_aOrderBy) > 0) {

			$sQuery .= ' ORDER BY '.implode(',', $sValue).' ';
		}

		return $sQuery;
	}

	/**
	 * prepare the limit
	 *
	 * @access private
	 * @return string
	 */

	private function _prepareLimit() {

		$sQuery = '';
		$limit = (int) $this->_limit;

		if($limit != 0) {
			$sQuery .= ' LIMIT '.$limit;
		}

		return $sQuery;
	}

	/**
	 * get the query construct with the Orm
	 *
	 * @access public
	 * @return string
	 */

	public function getQuery() {

		return $this->_prepare();
	}
}
