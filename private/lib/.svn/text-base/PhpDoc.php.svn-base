<?php

/**
 * Manage php doc
 *
 * @category  	lib
 * @author    	Judicaël Paquet <paquet.judicael@iscreenway.com>
 * @copyright 	Copyright (c) 2013-2014 iScreenway FR/VN Inc. (http://www.iscreenway.com)
 * @license   	http://www.iscreenway.com/framework/licence.php Tout droit réservé à http://www.iscreenway.com
 * @version   	Release: 1.0.0
 * @filesource	http://www.iscreenway.com/framework/download.php
 * @link      	http://www.iscreenway.com
 * @since     	1.0
 */

namespace lib;

/**
 * This class manage the php doc
 *
 * @category  	lib
 * @author    	Judicaël Paquet <paquet.judicael@iscreenway.com>
 * @copyright 	Copyright (c) 2013-2014 iScreenway FR/VN Inc. (http://www.iscreenway.com)
 * @license   	http://www.iscreenway.com/framework/licence.php Tout droit réservé à http://www.iscreenway.com
 * @version   	Release: 1.0.0
 * @filesource	http://www.iscreenway.com/framework/download.php
 * @link      	http://www.iscreenway.com
 * @since     	1.0
 */

class PhpDoc {

	/**
	 * add the namespace
	 * 
	 * @access public
	 * @return array
	 */
	
	public static function getPhpDocOfMethod($sClassName, $sMethodName) {
		
		$oReflectionClass  = new \ReflectionClass($sClassName);
		$oReflectionMethod = $oReflectionClass->getMethod($sMethodName);
		$sCommentPhpDoc = $oReflectionMethod->getDocComment();
		
		preg_match_all('/@([a-zA-Z0-9_-]+)[ \t]*\(([^\)]+)\)/', $sCommentPhpDoc, $aMatchs, PREG_SET_ORDER);
		$aParams = array();

		foreach ($aMatchs as $aOneMatch) {
			
			$aParams[$aOneMatch[1]] = array();

			foreach (explode(',', $aOneMatch[2]) as $sValue) {
				
				$aFinalExplode = explode('=', $sValue);

				if (preg_match('/^".+"$/', $aFinalExplode[1]) 
					|| preg_match("/^'.+'$/", $aFinalExplode[1])) {
					
					$aFinalExplode[1] = substr($aFinalExplode[1], 1);
					$aFinalExplode[1] = substr($aFinalExplode[1], 0, -1);
				}
				
				$aParams[$aOneMatch[1]][$aFinalExplode[0]] = $aFinalExplode[1];
			}
		}
		
		return $aParams;
	}
}
